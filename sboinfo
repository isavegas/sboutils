#!/bin/bash

# Is input empty?
if [ "$1" = "" ]; then
    echo "Input is empty. Usage: $(basename $0) [slackbuild...]"
    exit 1
fi

CONF=/etc/sboutils.conf
. $CONF

LOCATION=$(cat $REPO/SLACKBUILDS.TXT | grep -w $1 | grep LOCATION | sed "s|SLACKBUILD LOCATION: ./||")
FULLPATH=$REPO$LOCATION

SHORTDESC=$(cat $REPO/SLACKBUILDS.TXT | grep -w $1 | grep DESCRIPTION | sed "s|SLACKBUILD SHORT DESCRIPTION:  ||" | sed "s|$1 ||")

. $FULLPATH/$1.info

# Output
echo $LOCATION $SHORTDESC $VERSION
echo $HOMEPAGE

echo ""
cat $FULLPATH/README
echo ""
echo "--- direct dependencies: ([i] installed)"

requires_array=( $REQUIRES )

for d in ${requires_array[@]}; do
  pkg=""
  
  # check if dependency ($d) is among installed pkgs
  installed=$(find /var/lib/pkgtools/packages/ -name "${d}-*" )
  installed_array=( $installed )
  
  if [ ! -z "$installed" ]; then
    for i in ${installed_array[@]}; do
      # Name can be tricky, think of <lignome> and <libgnome-keyring>...
      # So collect here all names that matched the search, removing the
      # full path and trimming the stuff separated by the last 3 dashes
      # in the package name.
      pkg+=$(echo "`basename ${i%-*-*-*}` ")
    done
    pkg_array=( $pkg )
    
    # search if array contains element or not
    # https://stackoverflow.com/a/15394738
    if [[ " ${pkg_array[*]} " =~ " ${d} " ]]; then
      echo "[i] $d"
    elif [[ ! " ${pkg_array[*]} " =~ " ${d} " ]]; then
      echo "[ ] $d"
    fi
  elif [ -z "$installed" ]; then
    echo "[ ] $d"
  fi
done
