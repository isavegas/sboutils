#!/bin/bash

DIRNAM=$(basename $PWD)
. $DIRNAM.info
if [ "$DIRNAM" != "$PRGNAM" ]; then
	echo "SlackBuild folder name is different than PRGNAM!"
	exit 1
fi

. /etc/sboutils.conf

SBO_INSTALL="no"
SBO_UPGRADE="no"
SBO_WARN="no"
SBO_REBUILD="no"
SBO_REINSTALL="no"
SBO_DOWNLOAD="no"
SBO_CHECK_MD5SUM="no"
SBO_UPDATE_MD5SUM="no"
SBO_DOWNLOAD_NO_CERTIFICATE="no"

check_folder() {
	if [ ! -d $1 ]; then
		echo "Folder '$1' does not exist."
		exit 1
	elif [ ! -w $1 ]; then
		echo "Folder '$1' not writable."
		exit 1
	elif [ ! -x $1 ] || [ ! -r $1 ]; then
		echo "Folder '$1' not readable."
		exit 1
	fi
}

check_files() {
	if [ ! -f $1 ]; then
		echo "File $1 does not exist."
		exit 1
	elif [ -e $1 ] && [ ! -w $1 ]; then
		echo "File $1 is not writable."
		exit 1
	elif [ ! -r $1 ]; then
		echo "File $1 is not readable."
		exit 1
	fi
}

check_installpkg(){
	if [ ! -x "$(command -v installpkg)" ] || [ ! -x "$(command -v upgradepkg)" ]; then
		echo "<installpkg> and/or <upgradepkg> not in path/executable! Exiting."
		exit 1
	fi
}

load_info(){
	. $DIRNAM.info
	if [ "$DIRNAM" != "$PRGNAM" ]; then
		echo "SlackBuild folder name is different than PRGNAM!"
		exit 1
	fi
}

check_additional_files(){
	additional=$(grep "$1" $PRGNAM.SlackBuild)
	
	if [ ! -z "$additional" ]; then
		check_files $1
	fi
}

does_package_exist(){
# what would be package name and search the installed packages database
	PACKAGE_NAME=$(PRINT_PACKAGE_NAME="true" bash ./$PRGNAM.SlackBuild)
	PACKAGE_INST=$(find /var/lib/pkgtools/packages/ -name "${PACKAGE_NAME%.*}")
}

load_sources(){
# Load sources and their md5sums as arrays
	read -r -d '' -a ARRAY_DOWNLOAD < <( echo "$DOWNLOAD" && printf '\0' )
	read -r -d '' -a ARRAY_DOWNLOAD_x86_64 < <( echo "$DOWNLOAD_x86_64" && printf '\0' )
	read -r -d '' -a ARRAY_MD5SUM < <( echo "$MD5SUM" && printf '\0' )
	read -r -d '' -a ARRAY_MD5SUM_x86_64 < <( echo "$MD5SUM_x86_64" && printf '\0' )
}

package_exists(){
	if [ -f $PKGS/$PACKAGE_NAME ]; then
		echo "Package $PACKAGE_NAME exists in $PKGS"
	fi
}

package_installed(){
	if [ ! -z $PACKAGE_INST ]; then
		echo "Package $PACKAGE_NAME installed"
	fi
}

download_source(){
	# some sources (e.g. geneconv) need this to be downloaded
	if [ $SBO_DOWNLOAD_NO_CERTIFICATE = "yes" ]; then
		cert="--no-check-certificate"
	fi
	
	# pass the array to the function later
	local -n local_array_download=$2
	if [ ! -z "$1" ] && [ "$1" != "UNSUPPORTED" ] && [ "$1" != "UNTESTED" ]; then
		for d in ${local_array_download[@]}; do
			if [ -f `basename $d` ]; then
				echo "[d] `basename $d`"
			else
				echo "[ ] `basename $d`"
				wget $cert -c $d
			fi
		done
	fi
}

check_md5sum_source(){
	if [ ! -z "$1" ] && [ "$1" != "UNSUPPORTED" ] && [ "$1" != "UNTESTED" ]; then
		
		local -n local_array_download=$2 # ARRAY_DOWNLOAD(_x86_64)
		local -n local_array_md5sum=$3 # ARRAY_MD5SUM(_x86_64)
		
		# determine position in array
		for (( d=0; d<${#local_array_download[@]}; d++ )); do
			NAME_d=$(basename ${local_array_download[$d]})
			if [ ! -f "$NAME_d" ]; then
				# echo "[ ] ${local_array_download[$d]}"
				#exit 0
				echo "[ ] $NAME_d"
			elif [ -f "$NAME_d" ]; then
				MD5SUM_d=$(md5sum $NAME_d | awk '{print $1}')
				if [ "$MD5SUM_d" = "${local_array_md5sum[$d]}" ]; then
					#echo "[m] $MD5SUM_d $NAME_d"
					echo "[m] $NAME_d"
				elif [ "$MD5SUM_d" != "${local_array_md5sum[$d]}" ]; then
					#echo "[e] ${local_array_download[$d]}"
					#exit 0
					echo "[e] $NAME_d"
				fi
			fi
		done
	fi
}

update_md5sum_source(){
		if [ ! -z "$1" ] && [ ! "$1" = "UNSUPPORTED" ] && [ ! "$1" = "UNTESTED" ]; then
		
		local -n local_array_download=$2 # ARRAY_DOWNLOAD(_x86_64)
		local -n local_array_md5sum=$3 # ARRAY_MD5SUM(_x86_64)
		
		# determine position in array (d = index)
		for (( d=0; d<${#local_array_download[@]}; d++ )); do
			NAME_d=$(basename ${local_array_download[$d]})
			if [ ! -f "$NAME_d" ]; then
				#echo "[ ] ${local_array_download[$d]}"
				#exit 0
				echo "[ ] $NAME_d"
			elif [ -f "$NAME_d" ]; then
				MD5SUM_new=$(md5sum $NAME_d | awk '{print $1}' | sed 's:"::g')
				if [ "$MD5SUM_new" = "${local_array_md5sum[$d]}" ]; then
					#echo "[m] $MD5SUM_new $NAME_d"
					echo "[m] $NAME_d"
				elif [ "$MD5SUM_new" != "$MD5SUM_old" ]; then
					sed -i "s|${local_array_md5sum[$d]}|${MD5SUM_new}|" $PRGNAM.info
					echo "[u] $NAME_d"
					#echo "[u] ${local_array_md5sum[$d]} -> $MD5SUM_new $NAME_d"
					#exit 0
				fi
			fi
		done
	fi
}
download_source_title(){
	echo "--- download ([d] source already downloaded, [ ] source missing)"
}
check_md5sum_source_title(){
	echo "--- check md5sum ([m] match, [e] mismatch, [ ] source missing)"
}

update_md5sum_source_title(){
	echo "--- update md5sum ([m] match, [u] update, [ ] source missing)"
}

build(){
	bash ./$PRGNAM.SlackBuild
}

install_package(){
	installpkg $PKGS/$PACKAGE_NAME
}

upgrade_package(){
	upgradepkg $PKGS/$PACKAGE_NAME
}

install_warn(){
	installpkg --warn $PKGS/$PACKAGE_NAME
}

reinstall_package(){
	upgradepkg --reinstall --install-new $PKGS/$PACKAGE_NAME
}

helper() {
	echo "Run `basename $0` from within the SlackBuild containing folder."
	echo "Usage: `basename $0` [options]"
	echo "Options:"
	echo "  -i,   --install           build and install package"
	echo "  -u,   --upgrade           build and upgrade package"
	echo "  -w,   --warn              warn if package will overwrite files"
	echo "  -r,   --rebuild           rebuild package"
	echo "  -ri,  --reinstall         rebuild and reinstall package"
	echo "  -d,   --download          download sources and exit"
	echo "  -nc,  --no-certificate    do not check download certificate"
	echo "  -cm,  --check-md5         check sources md5sum and exit"
	echo "  -um,  --update-md5        update sources md5sum and exit"
	echo "  -h,   --help              print this help"
}

options(){
	while [ "$1" ]; do
		case $1 in
			-i|--install)
				SBO_INSTALL="yes"
			;;
  			-u|--upgrade)
				SBO_UPGRADE="yes"
			;;
			-w|--warn)
				SBO_WARN="yes"
			;;
			-r|--rebuild)
				SBO_REBUILD="yes"
			;;
			-ri|--reinstall)
				SBO_REINSTALL="yes"
			;;
			-d|--download)
				SBO_DOWNLOAD="yes"
			;;
			-nc|--no-certificate)
				SBO_DOWNLOAD_NO_CERTIFICATE="yes"
			;;
			-cm|--check-md5)
				SBO_CHECK_MD5SUM="yes"
			;;
			-um|--update-md5)
				SBO_UPDATE_MD5SUM="yes"
			;;
			-h|--help)
				helper
				exit 0
			;;
			*)
				echo "Unknown option $1"
				exit 1
			;;
  		esac
	shift
	done
}

main(){
	options "$@"

	load_info
	check_files $PRGNAM.SlackBuild
	check_files $PRGNAM.info
	check_files slack-desc
	check_additional_files doinst.sh
	check_additional_files douninst.sh
	does_package_exist
	load_sources

	# functions to execute pre-build
	if [ $SBO_DOWNLOAD = "yes" ]; then
		download_source_title
		download_source $DOWNLOAD ARRAY_DOWNLOAD
		download_source $DOWNLOAD_x86_64 ARRAY_DOWNLOAD_x86_64
		exit 0
	fi
	
	if [ $SBO_CHECK_MD5SUM = "yes" ]; then
		check_md5sum_source_title
		check_md5sum_source $DOWNLOAD ARRAY_DOWNLOAD ARRAY_MD5SUM
		check_md5sum_source $DOWNLOAD_x86_64 ARRAY_DOWNLOAD_x86_64 ARRAY_MD5SUM_x86_64
		exit 0
	fi
	
	if [ $SBO_UPDATE_MD5SUM = "yes" ]; then
		update_md5sum_source_title
		update_md5sum_source $DOWNLOAD ARRAY_DOWNLOAD ARRAY_MD5SUM
		update_md5sum_source $DOWNLOAD_x86_64 ARRAY_DOWNLOAD_x86_64 ARRAY_MD5SUM_x86_64
		exit 0
	fi
	
	# build, install and upgrade functions below cannot be used as regular user
	check_installpkg
	
	if [ -f $PKGS/$PACKAGE_NAME ] || [ ! -z "$PACKAGE_INST" ] && [ "$SBO_REBUILD" = "no" ] && [ "$SBO_REINSTALL" = "no" ]; then
		package_exists
		package_installed
		echo "Use -r or -ri options to rebuild."
		exit 0
	else
		download_source_title
		download_source $DOWNLOAD ARRAY_DOWNLOAD
		download_source $DOWNLOAD_x86_64 ARRAY_DOWNLOAD_x86_64
		check_md5sum_source $DOWNLOAD ARRAY_DOWNLOAD ARRAY_MD5SUM
		check_md5sum_source $DOWNLOAD_x86_64 ARRAY_DOWNLOAD_x86_64 ARRAY_MD5SUM_x86_64
		build
	fi
	
	# functions to execute post-build
	if [ "$SBO_INSTALL" = "yes" ]; then
		install_package
		exit 0
	fi

	if [ "$SBO_REINSTALL" = "yes" ]; then
		install_package
		exit 0
	fi

	if [ "$SBO_UPGRADE" = "yes" ]; then
		upgrade_package
		exit 0
	fi

	if [ "$SBO_WARN" = "yes" ]; then
		install_warn
		exit 0
	fi

	if [ "$SBO_REINSTALL" = "yes" ]; then
		reinstall_package
		exit 0
	fi

	exit 0
}

main "$@"

# End of file
