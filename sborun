#!/bin/bash
#
# sborun (sboutils)
#
# Copyright (c) 2022 Petar Petrov, slackalaxy at gmail dot com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#

DIRNAM=$(basename $PWD)

. /etc/sboutils.conf

SBO_BUILD="no"
SBO_INSTALL="no"
SBO_UPGRADE="no"
SBO_REINSTALL="no"
SBO_DOWNLOAD="no"
SBO_DOWNLOAD_NO_CERTIFICATE="no"
SBO_PKGLINT="no"

is_input_empty(){
	if [ -z "$1" ]; then
		echo "Input is empty. Use <`basename $0` help> for options."
		exit 1
	fi
}

check_settings() {
	if [ ! "$BUILDS" ]; then
		echo "'BUILDS' not specified in /etc/sboutils.conf."
		exit 1
	elif [ ! "$PKGS" ]; then
		echo "'PKGS' not specified in /etc/sboutils.conf."
		exit 1
	elif [ ! "$ARCH" ]; then
		echo "'ARCH' not specified in /etc/sboutils.conf."
		exit 1
	fi
}

check_folder() {
	if [ ! -d $1 ]; then
		echo "Folder '$1' does not exist."
		exit 1
	elif [ ! -w $1 ]; then
		echo "Folder '$1' not writable."
		exit 1
	elif [ ! -x $1 ] || [ ! -r $1 ]; then
		echo "Folder '$1' not readable."
		exit 1
	fi
}

check_files() {
	if [ ! -f $1 ]; then
		echo "File $1 does not exist."
		exit 1
	elif [ -e $1 ] && [ ! -w $1 ]; then
		echo "File $1 is not writable."
		exit 1
	elif [ ! -r $1 ]; then
		echo "File $1 is not readable."
		exit 1
	fi
}

check_installpkg(){
	if [ ! -x "$(command -v installpkg)" ] || [ ! -x "$(command -v upgradepkg)" ]; then
		echo "<installpkg> and/or <upgradepkg> not in path/executable! Exiting."
		exit 1
	fi
}

load_info(){
	. $DIRNAM.info
	if [ "$DIRNAM" != "$PRGNAM" ]; then
		echo "SlackBuild folder name is different than 'PRGNAM'!"
		exit 1
	fi
}

check_additional_files(){
	additional=$(grep "$1" $PRGNAM.SlackBuild)
	
	if [ ! -z "$additional" ]; then
		check_files $1
	fi
}

does_package_exist(){
# what would be package name and search the installed packages database
	PACKAGE_NAME=$(PRINT_PACKAGE_NAME="true" bash ./$PRGNAM.SlackBuild)
	PACKAGE_INST=$(find /var/lib/pkgtools/packages/ -name "${PACKAGE_NAME%.*}")
}

load_sources(){
	if [ "$ARCH" = "x86" ] && [ "$DOWNLOAD" = "UNSUPPORTED" ]; then
		echo "$ARCH is not supported"
		exit 0
	fi
	if [ "$ARCH" = "x86_64" ] && [ "$DOWNLOAD_x86_64" = "UNSUPPORTED" ]; then
		echo "$ARCH is not supported"
		exit 0
	fi
	if [ "$ARCH" = "x86_64" ] && [ "$DOWNLOAD_x86_64" = "UNTESTED" ]; then
		echo "$ARCH is untested"
		exit 0
	fi
	
	if [ "$ARCH" = "x86_64" ] && [ ! -z "$DOWNLOAD_x86_64" ]; then
		read -r -d '' -a ARRAY_DOWNLOAD < <( echo "$DOWNLOAD_x86_64" && printf '\0' )
		read -r -d '' -a ARRAY_MD5SUM < <( echo "$MD5SUM_x86_64" && printf '\0' )
	else
		read -r -d '' -a ARRAY_DOWNLOAD < <( echo "$DOWNLOAD" && printf '\0' )
		read -r -d '' -a ARRAY_MD5SUM < <( echo "$MD5SUM" && printf '\0' )
	fi
}

# TODO implement a FORCE_DOWNLOAD option
download_source(){
	# some sources (e.g. geneconv) need this to be downloaded
	if [ $SBO_DOWNLOAD_NO_CERTIFICATE = "yes" ]; then
		cert="--no-check-certificate"
	fi
	
	local -n local_array_download=$1
	for (( d=0; d<${#local_array_download[@]}; d++ )); do
		NAME_d=$(basename ${local_array_download[$d]} | sed 's:%20:\ :g')
		if [ -f "${SBOASK_SOURCES_DIR}/$NAME_d" ]; then
			echo "[d] $NAME_d"
		elif [ ! -f "${SBOASK_SOURCES_DIR}/$NAME_d" ]; then
			echo "[ ] $NAME_d"
			wget $cert -c "${local_array_download[$d]}" -P ${SBOASK_SOURCES_DIR}
		else
			echo "${SBOASK_SOURCES_DIR}/$NAME_d"
		fi
	done
}

check_md5sum_source(){
	local -n local_array_download=$1 # ARRAY_DOWNLOAD(_x86_64)
	local -n local_array_md5sum=$2 # ARRAY_MD5SUM(_x86_64)
	
	md5summary=""
	# determine position in array
	for (( d=0; d<${#local_array_download[@]}; d++ )); do
		NAME_d=$(basename ${local_array_download[$d]} | sed 's:%20:\ :g')
		if [ ! -f "${SBOASK_SOURCES_DIR}/$NAME_d" ]; then
			# echo "[ ] ${local_array_download[$d]}"
			#exit 0
			echo "[ ] $NAME_d"
			md5summary+="missing "
		elif [ -f "${SBOASK_SOURCES_DIR}/$NAME_d" ]; then
			MD5SUM_d=$(md5sum "$SBOASK_SOURCES_DIR/$NAME_d" | awk '{print $1}')
			if [ "$MD5SUM_d" = "${local_array_md5sum[$d]}" ]; then
				#echo "[m] $MD5SUM_d $NAME_d"
				echo "[m] $NAME_d"
			elif [ "$MD5SUM_d" != "${local_array_md5sum[$d]}" ]; then
				#echo "[e] ${local_array_download[$d]}"
				#exit 0
				echo "[e] $NAME_d"
				md5summary+="error "
			fi
		fi
	done
	md5summary_array=( $md5summary )
}

report_md5sum_source(){
	if [[ " ${md5summary_array[*]} " =~ " missing " ]] || [[ " ${md5summary_array[*]} " =~ " error " ]]; then
		exit 1
	fi
}

download_source_title(){
	echo "--- download ([d] already downloaded, [o] overwrite downloaded)"
}
check_md5sum_source_title(){
	echo "--- check md5sum ([m] match, [e] error (mismatch))"
}

build(){
	ln -s $SBOASK_SOURCES_DIR/$NAME_d .
	set -e
	bash ./$PRGNAM.SlackBuild
	
	if [ "$SBO_PKGLINT" = "yes" ]; then
		sbopkglint
	fi

	# cleanup symlinks to download
	find . -type l -exec rm {} +
}

install_warn(){
	overwrite=$(installpkg --warn $PKGS/$PACKAGE_NAME)
	if [ ! -z "$overwrite" ]; then
		echo "----- Files found on system -----"
		printf '%s\n' "$overwrite"
		echo "----- Files found on system -----"
		exit 0
	else
		echo "installpkg --warn check passed"
	fi
}

install_package(){
	if [ ! -z "$PACKAGE_INST" ]; then
		echo "Package $PACKAGE_NAME is already installed."
		exit 0
	else
		install_warn
		installpkg $PKGS/$PACKAGE_NAME
	fi
}

upgrade_package(){
	upgradepkg $PKGS/$PACKAGE_NAME
}

reinstall_package(){
	upgradepkg --reinstall --install-new $PKGS/$PACKAGE_NAME
}

helper() {
	echo "Run `basename $0` from within the SlackBuild containing folder."
	echo "Usage: `basename $0` [options]"
	echo "Options:"
	echo "  -b,   --build             build package"
	echo "  -i,   --install           install package"
	echo "  -u,   --upgrade           upgrade package"
	echo "  -ri,  --reinstall         reinstall package"
	echo "  -d,   --download          download and check sources"
	echo "  -nc,  --no-certificate    do not check download certificate"
	echo "  -li,  --sbopkglint        checks produced package"
	echo "  -h,   --help              print this help"
}

options(){
	while [ "$1" ]; do
		case $1 in
			-b|--build)
				SBO_BUILD="yes"
			;;
			-i|--install)
				SBO_INSTALL="yes"
			;;
  			-u|--upgrade)
				SBO_UPGRADE="yes"
			;;
			-ri|--reinstall)
				SBO_REINSTALL="yes"
			;;
			-d|--download)
				SBO_DOWNLOAD="yes"
			;;
			-nc|--no-certificate)
				SBO_DOWNLOAD_NO_CERTIFICATE="yes"
			;;
			-li|--sbopkglint)
				SBO_PKGLINT="yes"
			;;
			-h|--help|help)
				helper
				exit 0
			;;
			*)
				echo "Unknown option $1. Use <`basename $0` -h> for options."
				exit 1
			;;
  		esac
	shift
	done
}

main(){
	options "$@"
	check_folder $PWD
	check_folder $BUILDS
	check_files $DIRNAM.SlackBuild
	check_files $DIRNAM.info
	load_info
	check_files slack-desc
	check_additional_files doinst.sh
	check_additional_files douninst.sh
	does_package_exist
	load_sources

	# functions to execute pre-build
	if [ $SBO_DOWNLOAD = "yes" ]; then
		download_source_title
		download_source ARRAY_DOWNLOAD
	fi

	# build, install and upgrade functions below cannot be used as regular user
	check_installpkg

	if [ $SBO_BUILD = "yes" ]; then
		check_md5sum_source_title
		check_md5sum_source ARRAY_DOWNLOAD ARRAY_MD5SUM
		report_md5sum_source
		build
	fi

	if [ "$SBO_INSTALL" = "yes" ]; then
		install_package
		exit 0
	fi
	
	if [ "$SBO_UPGRADE" = "yes" ]; then
		upgrade_package
		exit 0
	fi
	
	if [ "$SBO_REINSTALL" = "yes" ]; then
		reinstall_package
		exit 0
	fi
	
	exit 0
}

check_settings
is_input_empty "$1"
main "$@"

# End of file
