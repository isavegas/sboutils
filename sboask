#!/bin/bash

. /etc/sboutils.conf

SBO_INFO="no"
SBO_DEPS="no"
SBO_DEPENDENTS="no"
SBO_FIND="no"
SBO_KEY="no"
SBO_ISINST="no"
SBO_VERBOSE="no"

is_input_empty(){
	if [ -z "$1" ]; then
		echo "Input is empty. For help, use `basename $0` help."
		exit 1
	fi
}

check_location(){
	CATEGORY=$(grep "/${1}$" $REPO/SLACKBUILDS.TXT | grep "SLACKBUILD LOCATION" | awk -F'[//]' '{print $2}')
	if [ -z "$CATEGORY" ] ; then
		echo "$1 not found on SlackBuilds.org."
		exit 1
	fi
	LOCATION=$CATEGORY/$1
}

slackdesc_print(){
	handy_ruler="|-----handy-ruler------------------------------------------------------|"
	slackdesc=$(sed -n "/$handy_ruler/{n;p;}" $1 | awk -F'[()]' '{print $2}' )
}


search_entry(){
	
	local -n SEARCH_ARRAY=$1
	
	search_array=""
	
	for k in ${SEARCH_ARRAY[@]}; do
		search_array+=( "$(cat $REPO/SLACKBUILDS.TXT | grep "/${k}$" | grep LOCATION | sed "s|SLACKBUILD LOCATION: ./||") " )
	done
	
	# sort by category
	IFS=$'\n' search_array_sorted=($(sort <<<"${search_array[*]}"))
	unset IFS
	
	# TODO: make this into a searched_status function
	for a in ${search_array_sorted[@]}; do
		if [ "$SBO_VERBOSE" = "yes" ]; then
			slackdesc_print $REPO/$a/slack-desc
			echo "$a ($slackdesc)"
		else
			echo "$a"
		fi	
	done
}

name_search(){
	FIND_array=( "$( cat $REPO/SLACKBUILDS.TXT | grep "SLACKBUILD LOCATION" | sed "s|SLACKBUILD LOCATION:||g" | awk -F  "/" '{print $3}' | grep -i "${1}")" )
	if [ ${#FIND_array[0]} = "0" ]; then
		echo "No matches found."
		exit 0
	fi
	search_entry FIND_array
}

keywords_search(){
	read -r -d '' -a KEYWORDS_ARRAY < <(grep "${1}" $REPO/TAGS.txt | awk '{print $1}' | sed "s|:||g")
	if [ ${#KEYWORDS_ARRAY[0]} = "0" ]; then
		echo "No matches found."
		exit 0
	fi
	search_entry KEYWORDS_ARRAY
}

display_info(){
	. $REPO/$LOCATION/$1.info
	keywords=$(grep -i -w "${1}:" $REPO/TAGS.txt | sed "s|${1}: ||g" | sed "s|${1}:||g" | sed "s|,|, |g")
	echo ""
	echo "Name:     $PRGNAM"
	echo "Version:  $VERSION"
	echo "Category: $CATEGORY"
	echo "Homepage: $HOMEPAGE"
	echo ""
	cat $REPO/$LOCATION/README
	echo ""
	echo "Keywords: $keywords"
	echo ""
}

source_and_md5sum(){
	local -n local_array_download=$1 # ARRAY_DOWNLOAD(_x86_64)
	local -n local_array_md5sum=$2 # ARRAY_MD5SUM(_x86_64)
	
	for (( d=0; d<${#local_array_download[@]}; d++ )); do
		NAME_d=$(basename ${local_array_download[$d]} | sed 's:%20:\ :g')
		echo -e "${local_array_md5sum[$d]} | $NAME_d"
	done
	echo ""
}

display_sources(){
	if [ -z $DOWNLOAD_x86_64 ]; then
		read -r -d '' -a ARRAY_DOWNLOAD < <( echo "$DOWNLOAD" && printf '\0' )
		read -r -d '' -a ARRAY_MD5SUM < <( echo "$MD5SUM" && printf '\0' )
		echo "--- sources (md5sum | filename):"
		source_and_md5sum ARRAY_DOWNLOAD ARRAY_MD5SUM
	fi
	if [ "$DOWNLOAD" != "UNSUPPORTED" ] && [ ! -z $DOWNLOAD_x86_64 ]; then
		read -r -d '' -a ARRAY_DOWNLOAD < <( echo "$DOWNLOAD" && printf '\0' )
		read -r -d '' -a ARRAY_MD5SUM < <( echo "$MD5SUM" && printf '\0' )
		echo "--- sources 32bit (md5sum | filename):"
		source_and_md5sum ARRAY_DOWNLOAD ARRAY_MD5SUM
	fi
	if [ "$DOWNLOAD_x86_64" != "UNSUPPORTED" ] && [ "$DOWNLOAD_x86_64" != "UNTESTED" ] && [ ! -z $DOWNLOAD_x86_64 ]; then
		read -r -d '' -a ARRAY_DOWNLOAD_x86_64 < <( echo "$DOWNLOAD_x86_64" && printf '\0' )
		read -r -d '' -a ARRAY_MD5SUM_x86_64 < <( echo "$MD5SUM_x86_64" && printf '\0' )
		echo "--- sources 64bit (md5sum | filename):"
		source_and_md5sum ARRAY_DOWNLOAD_x86_64 ARRAY_MD5SUM_x86_64
	fi
}

display_maintainer(){
	echo -e "Maintainer: $MAINTAINER ($EMAIL)\n"
}

searched_status(){
	if [ "$SBO_VERBOSE" = "yes" ]; then
		check_location $1
		if [ -f $REPO/$LOCATION/slack-desc ]; then
			slackdesc_print $REPO/$LOCATION/slack-desc
			echo "$2 $1 ($slackdesc)"
		else
			echo "$2 $1"
		fi
	else
		echo "$2 $1"
	fi
}

display_searched(){
	local p=${1} # searched entry
	# check if dependency ($1) is among installed pkgs
	installed=$(find /var/lib/pkgtools/packages/ -name "${1}-*")
	installed_array=( $installed )
	pkg=""
	if [ ! -z "$installed" ]; then
		for i in ${installed_array[@]}; do
			pkg+=$(echo "`basename ${i%-*-*-*}` ")
		done

		pkg_array=( $pkg )
		if [[ " ${pkg_array[*]} " =~ " ${p} " ]]; then
			searched_status "$p" "[i]"
		elif [[ ! " ${pkg_array[*]} " =~ " ${p} " ]]; then
			searched_status "$p" "[ ]"
		fi
	elif [ -z "$installed" ]; then
		searched_status "$p" "[ ]"
	fi
}

display_requires(){
	requires_array=( $REQUIRES )
	for d in ${requires_array[@]}; do
		display_searched $d
	done
}

hoorex_array(){
	if [ "$2" = "DEPS" ]; then
		hoorex=$(hoorex -r "$1")
	else
		hoorex=$(hoorex "$1")
	fi
		
	if [ -z "$hoorex" ]; then
		echo "$1 not found at SlackBuilds.org"
		exit 1
	fi
}

hoorex_output(){
	hoorex_array=( $hoorex )
	for h in ${hoorex_array[@]}; do
		display_searched $h
	done
}

dependencies_title(){
	echo "--- status and dependencies: ([i] installed, [ ] not installed)"
}

helper() {
	echo "Usage: `basename $0` [task] SlackBuild [-v]"
	echo "Tasks:"
	echo "  info           display information about SlackBuild"
	echo "  isinst         show if a package is installed"
	echo "  dep            show dependencies chain for a SlackBuild"
	echo "  dependent      show what depends on a SlackBuild"
	echo "  find|search    search for a SlackBuild by name"
	echo "  key            search by keyword"
	echo "  help           print this help"
	echo "Options:"
	echo "  -v, --verbose  display a more verbose output"
}

options(){
	case $1 in
		info)
			SBO_INFO="yes"
		;;
		isinst)
			SBO_ISINST="yes"
		;;
		dep)
			SBO_DEPS="yes"
		;;
		dependent)
			SBO_DEPENDENTS="yes"
		;;
		find|search)
			SBO_FIND="yes"
		;;
		key)
			SBO_KEY="yes"
		;;
		help|-h|--help)
			helper
			exit 0
		;;
		*)
			echo "No task or task unknown. Use <`basename $0` help> for options."
			exit 1
		;;
  	esac

	case $3 in
		-v|--verbose)
			SBO_VERBOSE="yes"
		;;
	esac
}

main(){
	options "$@"
	is_input_empty "$2"
	
	if [ "$SBO_FIND" = "yes" ] && [ ! -z "$2" ]; then
		name_search "$2"
		exit 0
	fi
	if [ "$SBO_KEY" = "yes" ] && [ ! -z "$2" ]; then
		keywords_search "$2"
		exit 0
	fi
		
	if [ "$SBO_ISINST" = "yes" ] && [ ! -z "$2" ]; then
		display_searched "$2"
		exit 0
	fi
	
	check_location "$2"
			
	# $2 refers to position, e.g.: sboask info $2 (aka slackbuild),
	# but comes first after the function, so it is referred as $1
	# inside the corresponding functions! A note to my stupid self.
	if [ "$SBO_INFO" = "yes" ] && [ ! -z "$2" ]; then
		display_info "$2"
		if [ "$SBO_VERBOSE" = "yes" ]; then
			display_sources
			display_maintainer
		fi
		display_searched "$2"
		dependencies_title
		display_requires "$2"
		exit 0
	fi

	if [ "$SBO_DEPS" = "yes" ] && [ ! -z "$2" ]; then
		hoorex_array "$2" DEPS
		dependencies_title
		hoorex_output
		exit 0
	fi
	if [ "$SBO_DEPENDENTS" = "yes" ] && [ ! -z "$2" ]; then
		hoorex_array "$2" DEPENDENTS
		dependencies_title
		hoorex_output
		exit 0
	fi
	exit 0
}

main "$@"

# End of file
